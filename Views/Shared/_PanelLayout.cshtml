<!DOCTYPE html>
<html lang="es" class="tw-h-full">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - VentaPOS</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/tailwind.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <div class="tw-flex tw-h-screen tw-overflow-hidden">
        <!-- Sidebar - Fijo -->
        <aside class="tw-w-64 tw-bg-white tw-border-r tw-border-gray-200 tw-fixed tw-h-screen tw-overflow-y-auto">
            <div class="tw-flex tw-flex-col">
                <!-- Logo/Título -->
                <div class="tw-p-4 tw-border-b tw-border-gray-200">
                    <h2 class="tw-text-xl tw-font-bold tw-text-gray-800">@(Context.Session.GetString("UserName") ?? "Usuario")</h2>
                    <p class="tw-text-sm tw-text-gray-600">Panel de Control</p>
                </div>

                <!-- Menú de navegación -->
                <nav class="tw-flex-1">
                    <!-- Sección de Ventas -->
                    <div class="tw-p-4">
                        <h3 class="tw-text-xs tw-font-semibold tw-text-gray-500 tw-uppercase tw-tracking-wide tw-mb-2">
                            VENTAS
                        </h3>
                        <a asp-controller="Ventas" asp-action="Index" class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "Ventas" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "Ventas" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                            </svg>
                            Nueva Venta
                        </a>
                        <a asp-controller="Ventas" asp-action="ListaVentas" class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "Ventas" && ViewContext.RouteData.Values["action"].ToString() == "ListaVentas" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "Ventas" && ViewContext.RouteData.Values["action"].ToString() == "ListaVentas" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                            Ventas
                        </a>
                        <a asp-controller="Clientes" asp-action="Index" class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "Clientes" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "Clientes" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                            </svg>
                            Clientes
                        </a>
                    </div>

                    <!-- Sección de Inventario -->
                    <div class="tw-p-4">
                        <h3 class="tw-text-xs tw-font-semibold tw-text-gray-500 tw-uppercase tw-tracking-wide tw-mb-2">
                            INVENTARIO
                        </h3>
                        <a asp-controller="Categoria" asp-action="Index" class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "Categoria" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "Categoria" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2M7 7h10" />
                            </svg>
                            Categorías
                        </a>
                        <a asp-controller="Productos" asp-action="Index" class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "Productos" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "Productos" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                            </svg>
                            Productos
                        </a>
                    </div>

                    <!-- Sección de Reportes -->
                    <div class="tw-p-4">
                        <h3 class="tw-text-xs tw-font-semibold tw-text-gray-500 tw-uppercase tw-tracking-wide tw-mb-2">
                            REPORTES
                        </h3>
                        <ul class="tw-space-y-1">
                            <li>
                                <a asp-controller="ReporteVentas" asp-action="Index" 
                                   class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md @(ViewContext.RouteData.Values["controller"].ToString() == "ReporteVentas" ? "tw-text-blue-600 tw-bg-blue-50" : "tw-text-gray-600 hover:tw-bg-gray-50 hover:tw-text-gray-900")">
                                    <svg class="tw-mr-3 tw-h-6 tw-w-6 @(ViewContext.RouteData.Values["controller"].ToString() == "ReporteVentas" ? "tw-text-blue-500" : "tw-text-gray-400 group-hover:tw-text-gray-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                    </svg>
                                    Reporte de Ventas
                                </a>
                            </li>
                        </ul>
                    </div>

                    <!-- Nueva sección para Cuenta -->
                    <div class="tw-p-4 tw-mt-auto">
                        <h3 class="tw-text-xs tw-font-semibold tw-text-gray-500 tw-uppercase tw-tracking-wide tw-mb-2">
                            CUENTA
                        </h3>
                        <a href="@Url.Action("Logout", "Usuarios")" 
                           class="tw-group tw-flex tw-items-center tw-px-2 tw-py-2 tw-text-sm tw-font-medium tw-rounded-md tw-text-red-600 hover:tw-bg-red-50 hover:tw-text-red-900">
                            <svg class="tw-mr-3 tw-h-6 tw-w-6 tw-text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                            </svg>
                            Cerrar Sesión
                        </a>
                    </div>
                </nav>
            </div>
        </aside>

        <!-- Contenido Principal -->
        <main class="tw-flex-1 tw-overflow-x-hidden tw-overflow-y-auto tw-bg-gray-100 tw-ml-64">
            @RenderBody()
        </main>
    </div>

    <!-- Sistema de Notificaciones Global (Modificado para mayor visibilidad) -->
    <div id="notificationSystem" class="tw-fixed tw-top-4 tw-right-4 tw-z-[9999] tw-w-full tw-max-w-sm" style="pointer-events: auto !important;">
        <div id="notificationContainer" class="tw-space-y-2"></div>
    </div>

    <script>
        // Sistema de Notificaciones Global
        const NotificationSystem = {
            types: {
                success: {
                    icon: `<svg class="tw-h-6 tw-w-6 tw-text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>`,
                    classes: 'tw-bg-green-50 tw-border-green-200'
                },
                error: {
                    icon: `<svg class="tw-h-6 tw-w-6 tw-text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>`,
                    classes: 'tw-bg-red-50 tw-border-red-200'
                },
                warning: {
                    icon: `<svg class="tw-h-6 tw-w-6 tw-text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                          </svg>`,
                    classes: 'tw-bg-yellow-50 tw-border-yellow-200'
                },
                info: {
                    icon: `<svg class="tw-h-6 tw-w-6 tw-text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>`,
                    classes: 'tw-bg-blue-50 tw-border-blue-200'
                }
            },

            show: function(title, message, type = 'info', duration = 3000) {
                console.log('Mostrando notificación:', { title, message, type, duration });
                
                try {
                    const container = document.getElementById('notificationContainer');
                    if (!container) {
                        console.error('No se encontró el contenedor de notificaciones');
                        alert(`Notificación: ${title} - ${message}`);
                        return;
                    }
                    
                    const typeConfig = this.types[type] || this.types.info;
                    const id = 'notification-' + Date.now();

                    const notification = document.createElement('div');
                    notification.id = id;
                    notification.style.cssText = 'box-shadow: 0 4px 12px rgba(0,0,0,0.15); border: 2px solid; pointer-events: auto !important;';
                    notification.className = `tw-transform tw-transition-all tw-duration-300 tw-ease-in-out tw-opacity-100
                                           tw-max-w-sm tw-w-full tw-bg-white tw-shadow-lg tw-rounded-lg tw-pointer-events-auto 
                                           tw-border ${typeConfig.classes}`;
                    
                    notification.innerHTML = `
                        <div class="tw-p-4">
                            <div class="tw-flex">
                                <div class="tw-flex-shrink-0">
                                    ${typeConfig.icon}
                                </div>
                                <div class="tw-ml-3 tw-w-0 tw-flex-1">
                                    <p class="tw-text-sm tw-font-medium tw-text-gray-900">${title}</p>
                                    <p class="tw-mt-1 tw-text-sm tw-text-gray-500">${message}</p>
                                </div>
                                <div class="tw-ml-4 tw-flex-shrink-0 tw-flex">
                                    <button onclick="NotificationSystem.close('${id}')" class="tw-bg-transparent tw-rounded-md tw-inline-flex tw-text-gray-400 hover:tw-text-gray-500">
                                        <span class="tw-sr-only">Cerrar</span>
                                        <svg class="tw-h-5 tw-w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;

                    container.appendChild(notification);

                    // Auto cerrar después del tiempo especificado
                    if (duration > 0) {
                        setTimeout(() => this.close(id), duration);
                    }
                } catch (error) {
                    console.error('Error al mostrar notificación:', error);
                    alert(`Notificación: ${title} - ${message}`);
                }
            },

            close: function(id) {
                try {
                    const notification = document.getElementById(id);
                    if (notification) {
                        notification.style.opacity = '0';
                        setTimeout(() => {
                            if (notification.parentNode) {
                                notification.remove();
                            }
                        }, 300);
                    }
                } catch (error) {
                    console.error('Error al cerrar notificación:', error);
                }
            }
        };

        // Función global para mostrar notificaciones
        function showNotification(title, message, type = 'success', duration = 3000) {
            NotificationSystem.show(title, message, type, duration);
        }
        
        // Mostrar una notificación de prueba al cargar la página para verificar que funciona
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                try {
                    NotificationSystem.show(
                        'Sistema de notificaciones',
                        'El sistema de notificaciones está funcionando correctamente',
                        'info',
                        5000
                    );
                } catch (error) {
                    console.error('Error al mostrar notificación inicial:', error);
                    alert('Error al mostrar notificación inicial: ' + error.message);
                }
            }, 1000);
        });
    </script>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html> 