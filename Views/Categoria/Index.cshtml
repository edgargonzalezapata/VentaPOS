@model IEnumerable<VentaPOS.Models.Categoria>

@{
    ViewData["Title"] = "Categorías";
    Layout = "_PanelLayout";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        .search-wrapper {
            position: relative;
            margin-bottom: 1rem;
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 3;
        }

        .clear-search {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6c757d;
            z-index: 3;
            display: none;
        }

        .search-input {
            padding-left: 2.5rem !important;
            padding-right: 2.5rem !important;
            border-radius: 0.5rem;
        }
        
        /* Ocultar el campo de búsqueda de DataTables */
        .dataTables_filter {
            display: none !important;
        }
        
        /* Ocultar la barra inferior de DataTables */
        .dataTables_info, .dataTables_paginate {
            display: none !important;
        }
    </style>
}

<div class="container p-4">
    <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h2">Gestión de Categorías</h1>
                <p class="lead">Administra y organiza las categorías de tus productos</p>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" id="btnNuevaCategoria">
                    <i class="bi bi-plus-circle me-2"></i>
                    Nueva Categoría
                </button>
                <form asp-action="InicializarCategorias" method="post" class="d-inline" id="formInicializar">
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn btn-success" id="btnInicializar">
                        <i class="bi bi-grid me-2"></i>
                        Inicializar Categorías
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="search-wrapper">
                <div class="search-icon">
                    <i class="bi bi-search"></i>
                </div>
                <input type="text" 
                       id="buscarCategoria" 
                       class="form-control form-control-lg search-input" 
                       placeholder="Buscar categoría por nombre o descripción...">
                <div class="clear-search" id="searchClearButton">
                    <i class="bi bi-x-lg"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de Categorías -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="categoriasTable">
                    <thead class="table-light">
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th class="text-end">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Nombre</td>
                                <td>@item.Descripcion</td>
                                <td class="text-end">
                                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="editarCategoria(@item.CategoriaID)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="eliminarCategoria(@item.CategoriaID)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear/editar categoría -->
<div class="modal fade" id="categoriaModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Nueva Categoría</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="categoriaForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="categoriaId" value="0" />
                    
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="nombre" name="nombre" required maxlength="100">
                    </div>

                    <div class="mb-3">
                        <label for="descripcion" class="form-label">Descripción</label>
                        <textarea class="form-control" id="descripcion" name="descripcion" rows="3" maxlength="500"></textarea>
                    </div>

                    <div class="modal-footer px-0 pb-0">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Guardar cambios</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- DataTables -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.5.0/js/responsive.bootstrap5.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

    <script>
        // Variables globales
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
        let categoriaModal;
        let dataTable;

        // Inicialización cuando el DOM está listo
        $(document).ready(function () {
            // Inicializar el modal
            categoriaModal = new bootstrap.Modal(document.getElementById('categoriaModal'));
            
            // Inicializar DataTable
            dataTable = $('#categoriasTable').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json'
                },
                responsive: true,
                paging: false,
                info: false,
                searching: true,
                order: [[0, 'asc']], // Ordenar por nombre por defecto
                columnDefs: [
                    { targets: -1, orderable: false } // Última columna (acciones) no ordenable
                ],
                dom: 't' // Solo muestra la tabla (t)
            });

            // Configurar barra de búsqueda personalizada
            const searchInput = document.getElementById('buscarCategoria');
            const searchClearButton = document.getElementById('searchClearButton');

            searchInput.addEventListener('input', function(e) {
                const hasValue = e.target.value.length > 0;
                searchClearButton.style.display = hasValue ? 'block' : 'none';
                
                // Aplicar filtro a DataTable
                dataTable.search(this.value).draw();
            });

            searchClearButton.addEventListener('click', function() {
                searchInput.value = '';
                searchClearButton.style.display = 'none';
                searchInput.focus();
                dataTable.search('').draw();
            });

            // Event listener para nueva categoría
            $('#btnNuevaCategoria').on('click', function() {
                document.getElementById('modalTitle').textContent = 'Nueva Categoría';
                document.getElementById('categoriaId').value = '0';
                document.getElementById('categoriaForm').reset();
                categoriaModal.show();
            });

            // Event listener para inicializar categorías
            $('#btnInicializar').on('click', function() {
                confirmarInicializacion();
            });

            // Event listener para el formulario
            $('#categoriaForm').on('submit', handleSubmit);
        });

        // Confirmar inicialización de categorías
        function confirmarInicializacion() {
            Swal.fire({
                title: '¿Inicializar categorías predeterminadas?',
                text: "Esto creará un conjunto de categorías predefinidas para el sistema.",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, inicializar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('formInicializar').submit();
                }
            });
        }

        // Función para editar categoría
        async function editarCategoria(id) {
            try {
                // Mostrar indicador de carga
                Swal.fire({
                    title: 'Cargando...',
                    text: 'Por favor espere',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/Categoria/Edit/${id}`);
                if (!response.ok) throw new Error('Error en la respuesta del servidor');
                
                const data = await response.json();
                Swal.close();
                
                if (data.success) {
                    document.getElementById('modalTitle').textContent = 'Editar Categoría';
                    document.getElementById('categoriaId').value = data.categoria.categoriaID;
                    document.getElementById('nombre').value = data.categoria.nombre;
                    document.getElementById('descripcion').value = data.categoria.descripcion;
                    categoriaModal.show();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Error al cargar la categoría'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al cargar la categoría'
                });
            }
        }

        // Función para eliminar categoría
        async function eliminarCategoria(id) {
            const result = await Swal.fire({
                title: '¿Estás seguro?',
                text: "Esta acción no se puede deshacer y podría afectar a los productos asociados.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            });

            if (result.isConfirmed) {
                try {
                    // Mostrar indicador de carga
                    Swal.fire({
                        title: 'Eliminando categoría...',
                        text: 'Por favor espere',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    const formData = new FormData();
                    formData.append('id', id);
                    formData.append('__RequestVerificationToken', antiForgeryToken);
                    
                    const response = await fetch('/Categoria/Delete/' + id, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: formData
                    });
                    
                    if (!response.ok) {
                        const text = await response.text();
                        console.error('Error en eliminación:', text);
                        throw new Error('Error al eliminar la categoría');
                    }
                    
                    // Actualizar la tabla
                    window.location.reload();
                    
                    // Mostrar notificación de éxito
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Categoría eliminada correctamente'
                    });
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Error al eliminar la categoría',
                        confirmButtonText: 'Entendido'
                    });
                }
            }
        }

        // Función para manejar el envío del formulario
        async function handleSubmit(e) {
            e.preventDefault();
            
            try {
                const categoriaId = document.getElementById('categoriaId').value;
                const categoria = {
                    categoriaID: parseInt(categoriaId),
                    nombre: document.getElementById('nombre').value.trim(),
                    descripcion: document.getElementById('descripcion').value.trim()
                };

                // Validaciones básicas
                if (!categoria.nombre) {
                    throw new Error('Por favor ingrese un nombre para la categoría');
                }

                // Mostrar indicador de carga
                Swal.fire({
                    title: 'Guardando cambios...',
                    text: 'Por favor espere',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const esNueva = categoriaId === '0';
                const url = esNueva ? '/Categoria/Create' : '/Categoria/Update';
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify(categoria)
                });

                let result;
                try {
                    result = await response.json();
                } catch (parseError) {
                    console.error('Error al procesar la respuesta:', parseError);
                    throw new Error('Error al procesar la respuesta del servidor');
                }

                if (response.ok && result.success) {
                    // Cerrar el modal
                    categoriaModal.hide();
                    
                    // Recargar la página para actualizar la tabla
                    window.location.reload();

                    // Mostrar notificación de éxito
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });

                    Toast.fire({
                        icon: 'success',
                        title: esNueva ? 'Categoría creada correctamente' : 'Categoría actualizada correctamente'
                    });
                } else {
                    throw new Error(result.message || 'Error al guardar la categoría');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error al guardar la categoría',
                    confirmButtonText: 'Entendido'
                });
            }
        }
    </script>
} 